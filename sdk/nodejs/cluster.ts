// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Cluster extends pulumi.CustomResource {
    /**
     * Get an existing Cluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClusterState, opts?: pulumi.CustomResourceOptions): Cluster {
        return new Cluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'databricks:index/cluster:Cluster';

    /**
     * Returns true if the given object is an instance of Cluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Cluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cluster.__pulumiType;
    }

    public readonly autoscale!: pulumi.Output<outputs.ClusterAutoscale | undefined>;
    public readonly autoterminationMinutes!: pulumi.Output<number | undefined>;
    public readonly awsAttributes!: pulumi.Output<outputs.ClusterAwsAttributes | undefined>;
    public /*out*/ readonly clusterId!: pulumi.Output<string>;
    public readonly clusterLogConf!: pulumi.Output<outputs.ClusterClusterLogConf | undefined>;
    public readonly clusterName!: pulumi.Output<string>;
    public readonly customTags!: pulumi.Output<{[key: string]: any} | undefined>;
    public /*out*/ readonly defaultTags!: pulumi.Output<{[key: string]: any}>;
    public readonly dockerImage!: pulumi.Output<outputs.ClusterDockerImage | undefined>;
    public readonly driverNodeTypeId!: pulumi.Output<string>;
    public readonly enableElasticDisk!: pulumi.Output<boolean>;
    public readonly idempotencyToken!: pulumi.Output<number | undefined>;
    public readonly initScripts!: pulumi.Output<outputs.ClusterInitScript[] | undefined>;
    public readonly instancePoolId!: pulumi.Output<string | undefined>;
    public readonly libraryCrans!: pulumi.Output<outputs.ClusterLibraryCran[] | undefined>;
    public readonly libraryEggs!: pulumi.Output<outputs.ClusterLibraryEgg[] | undefined>;
    public readonly libraryJars!: pulumi.Output<outputs.ClusterLibraryJar[] | undefined>;
    public readonly libraryMavens!: pulumi.Output<outputs.ClusterLibraryMaven[] | undefined>;
    public readonly libraryPypis!: pulumi.Output<outputs.ClusterLibraryPypi[] | undefined>;
    public readonly libraryWhls!: pulumi.Output<outputs.ClusterLibraryWhl[] | undefined>;
    public readonly nodeTypeId!: pulumi.Output<string | undefined>;
    public readonly numWorkers!: pulumi.Output<number | undefined>;
    public readonly singleUserName!: pulumi.Output<string | undefined>;
    public readonly sparkConf!: pulumi.Output<{[key: string]: any} | undefined>;
    public readonly sparkEnvVars!: pulumi.Output<{[key: string]: any} | undefined>;
    public readonly sparkVersion!: pulumi.Output<string>;
    public readonly sshPublicKeys!: pulumi.Output<string[] | undefined>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public /*out*/ readonly stateMessage!: pulumi.Output<string>;

    /**
     * Create a Cluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClusterArgs | ClusterState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as ClusterState | undefined;
            inputs["autoscale"] = state ? state.autoscale : undefined;
            inputs["autoterminationMinutes"] = state ? state.autoterminationMinutes : undefined;
            inputs["awsAttributes"] = state ? state.awsAttributes : undefined;
            inputs["clusterId"] = state ? state.clusterId : undefined;
            inputs["clusterLogConf"] = state ? state.clusterLogConf : undefined;
            inputs["clusterName"] = state ? state.clusterName : undefined;
            inputs["customTags"] = state ? state.customTags : undefined;
            inputs["defaultTags"] = state ? state.defaultTags : undefined;
            inputs["dockerImage"] = state ? state.dockerImage : undefined;
            inputs["driverNodeTypeId"] = state ? state.driverNodeTypeId : undefined;
            inputs["enableElasticDisk"] = state ? state.enableElasticDisk : undefined;
            inputs["idempotencyToken"] = state ? state.idempotencyToken : undefined;
            inputs["initScripts"] = state ? state.initScripts : undefined;
            inputs["instancePoolId"] = state ? state.instancePoolId : undefined;
            inputs["libraryCrans"] = state ? state.libraryCrans : undefined;
            inputs["libraryEggs"] = state ? state.libraryEggs : undefined;
            inputs["libraryJars"] = state ? state.libraryJars : undefined;
            inputs["libraryMavens"] = state ? state.libraryMavens : undefined;
            inputs["libraryPypis"] = state ? state.libraryPypis : undefined;
            inputs["libraryWhls"] = state ? state.libraryWhls : undefined;
            inputs["nodeTypeId"] = state ? state.nodeTypeId : undefined;
            inputs["numWorkers"] = state ? state.numWorkers : undefined;
            inputs["singleUserName"] = state ? state.singleUserName : undefined;
            inputs["sparkConf"] = state ? state.sparkConf : undefined;
            inputs["sparkEnvVars"] = state ? state.sparkEnvVars : undefined;
            inputs["sparkVersion"] = state ? state.sparkVersion : undefined;
            inputs["sshPublicKeys"] = state ? state.sshPublicKeys : undefined;
            inputs["state"] = state ? state.state : undefined;
            inputs["stateMessage"] = state ? state.stateMessage : undefined;
        } else {
            const args = argsOrState as ClusterArgs | undefined;
            if (!args || args.sparkVersion === undefined) {
                throw new Error("Missing required property 'sparkVersion'");
            }
            inputs["autoscale"] = args ? args.autoscale : undefined;
            inputs["autoterminationMinutes"] = args ? args.autoterminationMinutes : undefined;
            inputs["awsAttributes"] = args ? args.awsAttributes : undefined;
            inputs["clusterLogConf"] = args ? args.clusterLogConf : undefined;
            inputs["clusterName"] = args ? args.clusterName : undefined;
            inputs["customTags"] = args ? args.customTags : undefined;
            inputs["dockerImage"] = args ? args.dockerImage : undefined;
            inputs["driverNodeTypeId"] = args ? args.driverNodeTypeId : undefined;
            inputs["enableElasticDisk"] = args ? args.enableElasticDisk : undefined;
            inputs["idempotencyToken"] = args ? args.idempotencyToken : undefined;
            inputs["initScripts"] = args ? args.initScripts : undefined;
            inputs["instancePoolId"] = args ? args.instancePoolId : undefined;
            inputs["libraryCrans"] = args ? args.libraryCrans : undefined;
            inputs["libraryEggs"] = args ? args.libraryEggs : undefined;
            inputs["libraryJars"] = args ? args.libraryJars : undefined;
            inputs["libraryMavens"] = args ? args.libraryMavens : undefined;
            inputs["libraryPypis"] = args ? args.libraryPypis : undefined;
            inputs["libraryWhls"] = args ? args.libraryWhls : undefined;
            inputs["nodeTypeId"] = args ? args.nodeTypeId : undefined;
            inputs["numWorkers"] = args ? args.numWorkers : undefined;
            inputs["singleUserName"] = args ? args.singleUserName : undefined;
            inputs["sparkConf"] = args ? args.sparkConf : undefined;
            inputs["sparkEnvVars"] = args ? args.sparkEnvVars : undefined;
            inputs["sparkVersion"] = args ? args.sparkVersion : undefined;
            inputs["sshPublicKeys"] = args ? args.sshPublicKeys : undefined;
            inputs["clusterId"] = undefined /*out*/;
            inputs["defaultTags"] = undefined /*out*/;
            inputs["state"] = undefined /*out*/;
            inputs["stateMessage"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(Cluster.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Cluster resources.
 */
export interface ClusterState {
    readonly autoscale?: pulumi.Input<inputs.ClusterAutoscale>;
    readonly autoterminationMinutes?: pulumi.Input<number>;
    readonly awsAttributes?: pulumi.Input<inputs.ClusterAwsAttributes>;
    readonly clusterId?: pulumi.Input<string>;
    readonly clusterLogConf?: pulumi.Input<inputs.ClusterClusterLogConf>;
    readonly clusterName?: pulumi.Input<string>;
    readonly customTags?: pulumi.Input<{[key: string]: any}>;
    readonly defaultTags?: pulumi.Input<{[key: string]: any}>;
    readonly dockerImage?: pulumi.Input<inputs.ClusterDockerImage>;
    readonly driverNodeTypeId?: pulumi.Input<string>;
    readonly enableElasticDisk?: pulumi.Input<boolean>;
    readonly idempotencyToken?: pulumi.Input<number>;
    readonly initScripts?: pulumi.Input<pulumi.Input<inputs.ClusterInitScript>[]>;
    readonly instancePoolId?: pulumi.Input<string>;
    readonly libraryCrans?: pulumi.Input<pulumi.Input<inputs.ClusterLibraryCran>[]>;
    readonly libraryEggs?: pulumi.Input<pulumi.Input<inputs.ClusterLibraryEgg>[]>;
    readonly libraryJars?: pulumi.Input<pulumi.Input<inputs.ClusterLibraryJar>[]>;
    readonly libraryMavens?: pulumi.Input<pulumi.Input<inputs.ClusterLibraryMaven>[]>;
    readonly libraryPypis?: pulumi.Input<pulumi.Input<inputs.ClusterLibraryPypi>[]>;
    readonly libraryWhls?: pulumi.Input<pulumi.Input<inputs.ClusterLibraryWhl>[]>;
    readonly nodeTypeId?: pulumi.Input<string>;
    readonly numWorkers?: pulumi.Input<number>;
    readonly singleUserName?: pulumi.Input<string>;
    readonly sparkConf?: pulumi.Input<{[key: string]: any}>;
    readonly sparkEnvVars?: pulumi.Input<{[key: string]: any}>;
    readonly sparkVersion?: pulumi.Input<string>;
    readonly sshPublicKeys?: pulumi.Input<pulumi.Input<string>[]>;
    readonly state?: pulumi.Input<string>;
    readonly stateMessage?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Cluster resource.
 */
export interface ClusterArgs {
    readonly autoscale?: pulumi.Input<inputs.ClusterAutoscale>;
    readonly autoterminationMinutes?: pulumi.Input<number>;
    readonly awsAttributes?: pulumi.Input<inputs.ClusterAwsAttributes>;
    readonly clusterLogConf?: pulumi.Input<inputs.ClusterClusterLogConf>;
    readonly clusterName?: pulumi.Input<string>;
    readonly customTags?: pulumi.Input<{[key: string]: any}>;
    readonly dockerImage?: pulumi.Input<inputs.ClusterDockerImage>;
    readonly driverNodeTypeId?: pulumi.Input<string>;
    readonly enableElasticDisk?: pulumi.Input<boolean>;
    readonly idempotencyToken?: pulumi.Input<number>;
    readonly initScripts?: pulumi.Input<pulumi.Input<inputs.ClusterInitScript>[]>;
    readonly instancePoolId?: pulumi.Input<string>;
    readonly libraryCrans?: pulumi.Input<pulumi.Input<inputs.ClusterLibraryCran>[]>;
    readonly libraryEggs?: pulumi.Input<pulumi.Input<inputs.ClusterLibraryEgg>[]>;
    readonly libraryJars?: pulumi.Input<pulumi.Input<inputs.ClusterLibraryJar>[]>;
    readonly libraryMavens?: pulumi.Input<pulumi.Input<inputs.ClusterLibraryMaven>[]>;
    readonly libraryPypis?: pulumi.Input<pulumi.Input<inputs.ClusterLibraryPypi>[]>;
    readonly libraryWhls?: pulumi.Input<pulumi.Input<inputs.ClusterLibraryWhl>[]>;
    readonly nodeTypeId?: pulumi.Input<string>;
    readonly numWorkers?: pulumi.Input<number>;
    readonly singleUserName?: pulumi.Input<string>;
    readonly sparkConf?: pulumi.Input<{[key: string]: any}>;
    readonly sparkEnvVars?: pulumi.Input<{[key: string]: any}>;
    readonly sparkVersion: pulumi.Input<string>;
    readonly sshPublicKeys?: pulumi.Input<pulumi.Input<string>[]>;
}
