// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DbfsFile extends pulumi.CustomResource {
    /**
     * Get an existing DbfsFile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DbfsFileState, opts?: pulumi.CustomResourceOptions): DbfsFile {
        return new DbfsFile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'databricks:index/dbfsFile:DbfsFile';

    /**
     * Returns true if the given object is an instance of DbfsFile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DbfsFile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DbfsFile.__pulumiType;
    }

    public readonly content!: pulumi.Output<string>;
    public /*out*/ readonly fileSize!: pulumi.Output<number>;
    public readonly mkdirs!: pulumi.Output<boolean | undefined>;
    public readonly overwrite!: pulumi.Output<boolean | undefined>;
    public readonly path!: pulumi.Output<string>;
    public readonly validateRemoteFile!: pulumi.Output<boolean | undefined>;

    /**
     * Create a DbfsFile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DbfsFileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DbfsFileArgs | DbfsFileState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as DbfsFileState | undefined;
            inputs["content"] = state ? state.content : undefined;
            inputs["fileSize"] = state ? state.fileSize : undefined;
            inputs["mkdirs"] = state ? state.mkdirs : undefined;
            inputs["overwrite"] = state ? state.overwrite : undefined;
            inputs["path"] = state ? state.path : undefined;
            inputs["validateRemoteFile"] = state ? state.validateRemoteFile : undefined;
        } else {
            const args = argsOrState as DbfsFileArgs | undefined;
            if (!args || args.content === undefined) {
                throw new Error("Missing required property 'content'");
            }
            if (!args || args.path === undefined) {
                throw new Error("Missing required property 'path'");
            }
            inputs["content"] = args ? args.content : undefined;
            inputs["mkdirs"] = args ? args.mkdirs : undefined;
            inputs["overwrite"] = args ? args.overwrite : undefined;
            inputs["path"] = args ? args.path : undefined;
            inputs["validateRemoteFile"] = args ? args.validateRemoteFile : undefined;
            inputs["fileSize"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(DbfsFile.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DbfsFile resources.
 */
export interface DbfsFileState {
    readonly content?: pulumi.Input<string>;
    readonly fileSize?: pulumi.Input<number>;
    readonly mkdirs?: pulumi.Input<boolean>;
    readonly overwrite?: pulumi.Input<boolean>;
    readonly path?: pulumi.Input<string>;
    readonly validateRemoteFile?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a DbfsFile resource.
 */
export interface DbfsFileArgs {
    readonly content: pulumi.Input<string>;
    readonly mkdirs?: pulumi.Input<boolean>;
    readonly overwrite?: pulumi.Input<boolean>;
    readonly path: pulumi.Input<string>;
    readonly validateRemoteFile?: pulumi.Input<boolean>;
}
