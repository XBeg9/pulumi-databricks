// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class InstancePool extends pulumi.CustomResource {
    /**
     * Get an existing InstancePool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InstancePoolState, opts?: pulumi.CustomResourceOptions): InstancePool {
        return new InstancePool(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'databricks:index/instancePool:InstancePool';

    /**
     * Returns true if the given object is an instance of InstancePool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is InstancePool {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === InstancePool.__pulumiType;
    }

    public readonly awsAttributes!: pulumi.Output<outputs.InstancePoolAwsAttributes | undefined>;
    public readonly customTags!: pulumi.Output<{[key: string]: any} | undefined>;
    public /*out*/ readonly defaultTags!: pulumi.Output<{[key: string]: any}>;
    public readonly diskSpec!: pulumi.Output<outputs.InstancePoolDiskSpec | undefined>;
    public readonly enableElasticDisk!: pulumi.Output<boolean | undefined>;
    public readonly idleInstanceAutoterminationMinutes!: pulumi.Output<number>;
    public readonly instancePoolName!: pulumi.Output<string>;
    public readonly maxCapacity!: pulumi.Output<number>;
    public readonly minIdleInstances!: pulumi.Output<number>;
    public readonly nodeTypeId!: pulumi.Output<string>;
    public readonly preloadedSparkVersions!: pulumi.Output<string[] | undefined>;
    public readonly state!: pulumi.Output<string>;

    /**
     * Create a InstancePool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InstancePoolArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InstancePoolArgs | InstancePoolState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as InstancePoolState | undefined;
            inputs["awsAttributes"] = state ? state.awsAttributes : undefined;
            inputs["customTags"] = state ? state.customTags : undefined;
            inputs["defaultTags"] = state ? state.defaultTags : undefined;
            inputs["diskSpec"] = state ? state.diskSpec : undefined;
            inputs["enableElasticDisk"] = state ? state.enableElasticDisk : undefined;
            inputs["idleInstanceAutoterminationMinutes"] = state ? state.idleInstanceAutoterminationMinutes : undefined;
            inputs["instancePoolName"] = state ? state.instancePoolName : undefined;
            inputs["maxCapacity"] = state ? state.maxCapacity : undefined;
            inputs["minIdleInstances"] = state ? state.minIdleInstances : undefined;
            inputs["nodeTypeId"] = state ? state.nodeTypeId : undefined;
            inputs["preloadedSparkVersions"] = state ? state.preloadedSparkVersions : undefined;
            inputs["state"] = state ? state.state : undefined;
        } else {
            const args = argsOrState as InstancePoolArgs | undefined;
            if (!args || args.idleInstanceAutoterminationMinutes === undefined) {
                throw new Error("Missing required property 'idleInstanceAutoterminationMinutes'");
            }
            if (!args || args.instancePoolName === undefined) {
                throw new Error("Missing required property 'instancePoolName'");
            }
            if (!args || args.maxCapacity === undefined) {
                throw new Error("Missing required property 'maxCapacity'");
            }
            if (!args || args.minIdleInstances === undefined) {
                throw new Error("Missing required property 'minIdleInstances'");
            }
            if (!args || args.nodeTypeId === undefined) {
                throw new Error("Missing required property 'nodeTypeId'");
            }
            inputs["awsAttributes"] = args ? args.awsAttributes : undefined;
            inputs["customTags"] = args ? args.customTags : undefined;
            inputs["diskSpec"] = args ? args.diskSpec : undefined;
            inputs["enableElasticDisk"] = args ? args.enableElasticDisk : undefined;
            inputs["idleInstanceAutoterminationMinutes"] = args ? args.idleInstanceAutoterminationMinutes : undefined;
            inputs["instancePoolName"] = args ? args.instancePoolName : undefined;
            inputs["maxCapacity"] = args ? args.maxCapacity : undefined;
            inputs["minIdleInstances"] = args ? args.minIdleInstances : undefined;
            inputs["nodeTypeId"] = args ? args.nodeTypeId : undefined;
            inputs["preloadedSparkVersions"] = args ? args.preloadedSparkVersions : undefined;
            inputs["state"] = args ? args.state : undefined;
            inputs["defaultTags"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(InstancePool.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering InstancePool resources.
 */
export interface InstancePoolState {
    readonly awsAttributes?: pulumi.Input<inputs.InstancePoolAwsAttributes>;
    readonly customTags?: pulumi.Input<{[key: string]: any}>;
    readonly defaultTags?: pulumi.Input<{[key: string]: any}>;
    readonly diskSpec?: pulumi.Input<inputs.InstancePoolDiskSpec>;
    readonly enableElasticDisk?: pulumi.Input<boolean>;
    readonly idleInstanceAutoterminationMinutes?: pulumi.Input<number>;
    readonly instancePoolName?: pulumi.Input<string>;
    readonly maxCapacity?: pulumi.Input<number>;
    readonly minIdleInstances?: pulumi.Input<number>;
    readonly nodeTypeId?: pulumi.Input<string>;
    readonly preloadedSparkVersions?: pulumi.Input<pulumi.Input<string>[]>;
    readonly state?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a InstancePool resource.
 */
export interface InstancePoolArgs {
    readonly awsAttributes?: pulumi.Input<inputs.InstancePoolAwsAttributes>;
    readonly customTags?: pulumi.Input<{[key: string]: any}>;
    readonly diskSpec?: pulumi.Input<inputs.InstancePoolDiskSpec>;
    readonly enableElasticDisk?: pulumi.Input<boolean>;
    readonly idleInstanceAutoterminationMinutes: pulumi.Input<number>;
    readonly instancePoolName: pulumi.Input<string>;
    readonly maxCapacity: pulumi.Input<number>;
    readonly minIdleInstances: pulumi.Input<number>;
    readonly nodeTypeId: pulumi.Input<string>;
    readonly preloadedSparkVersions?: pulumi.Input<pulumi.Input<string>[]>;
    readonly state?: pulumi.Input<string>;
}
