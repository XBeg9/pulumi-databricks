// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package databricks

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type DbfsFileSync struct {
	pulumi.CustomResourceState

	FileSize pulumi.IntOutput       `pulumi:"fileSize"`
	Host     pulumi.StringPtrOutput `pulumi:"host"`
	Mkdirs   pulumi.BoolPtrOutput   `pulumi:"mkdirs"`
	SrcPath  pulumi.StringOutput    `pulumi:"srcPath"`
	TgtPath  pulumi.StringOutput    `pulumi:"tgtPath"`
	Token    pulumi.StringPtrOutput `pulumi:"token"`
}

// NewDbfsFileSync registers a new resource with the given unique name, arguments, and options.
func NewDbfsFileSync(ctx *pulumi.Context,
	name string, args *DbfsFileSyncArgs, opts ...pulumi.ResourceOption) (*DbfsFileSync, error) {
	if args == nil || args.FileSize == nil {
		return nil, errors.New("missing required argument 'FileSize'")
	}
	if args == nil || args.SrcPath == nil {
		return nil, errors.New("missing required argument 'SrcPath'")
	}
	if args == nil || args.TgtPath == nil {
		return nil, errors.New("missing required argument 'TgtPath'")
	}
	if args == nil {
		args = &DbfsFileSyncArgs{}
	}
	var resource DbfsFileSync
	err := ctx.RegisterResource("databricks:index/dbfsFileSync:DbfsFileSync", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDbfsFileSync gets an existing DbfsFileSync resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDbfsFileSync(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DbfsFileSyncState, opts ...pulumi.ResourceOption) (*DbfsFileSync, error) {
	var resource DbfsFileSync
	err := ctx.ReadResource("databricks:index/dbfsFileSync:DbfsFileSync", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DbfsFileSync resources.
type dbfsFileSyncState struct {
	FileSize *int    `pulumi:"fileSize"`
	Host     *string `pulumi:"host"`
	Mkdirs   *bool   `pulumi:"mkdirs"`
	SrcPath  *string `pulumi:"srcPath"`
	TgtPath  *string `pulumi:"tgtPath"`
	Token    *string `pulumi:"token"`
}

type DbfsFileSyncState struct {
	FileSize pulumi.IntPtrInput
	Host     pulumi.StringPtrInput
	Mkdirs   pulumi.BoolPtrInput
	SrcPath  pulumi.StringPtrInput
	TgtPath  pulumi.StringPtrInput
	Token    pulumi.StringPtrInput
}

func (DbfsFileSyncState) ElementType() reflect.Type {
	return reflect.TypeOf((*dbfsFileSyncState)(nil)).Elem()
}

type dbfsFileSyncArgs struct {
	FileSize int     `pulumi:"fileSize"`
	Host     *string `pulumi:"host"`
	Mkdirs   *bool   `pulumi:"mkdirs"`
	SrcPath  string  `pulumi:"srcPath"`
	TgtPath  string  `pulumi:"tgtPath"`
	Token    *string `pulumi:"token"`
}

// The set of arguments for constructing a DbfsFileSync resource.
type DbfsFileSyncArgs struct {
	FileSize pulumi.IntInput
	Host     pulumi.StringPtrInput
	Mkdirs   pulumi.BoolPtrInput
	SrcPath  pulumi.StringInput
	TgtPath  pulumi.StringInput
	Token    pulumi.StringPtrInput
}

func (DbfsFileSyncArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dbfsFileSyncArgs)(nil)).Elem()
}
