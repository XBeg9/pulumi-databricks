// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package aws

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type MwsStorageConfigurations struct {
	pulumi.CustomResourceState

	AccountId                pulumi.StringOutput `pulumi:"accountId"`
	BucketName               pulumi.StringOutput `pulumi:"bucketName"`
	CreationTime             pulumi.IntOutput    `pulumi:"creationTime"`
	StorageConfigurationId   pulumi.StringOutput `pulumi:"storageConfigurationId"`
	StorageConfigurationName pulumi.StringOutput `pulumi:"storageConfigurationName"`
}

// NewMwsStorageConfigurations registers a new resource with the given unique name, arguments, and options.
func NewMwsStorageConfigurations(ctx *pulumi.Context,
	name string, args *MwsStorageConfigurationsArgs, opts ...pulumi.ResourceOption) (*MwsStorageConfigurations, error) {
	if args == nil || args.AccountId == nil {
		return nil, errors.New("missing required argument 'AccountId'")
	}
	if args == nil || args.BucketName == nil {
		return nil, errors.New("missing required argument 'BucketName'")
	}
	if args == nil || args.StorageConfigurationName == nil {
		return nil, errors.New("missing required argument 'StorageConfigurationName'")
	}
	if args == nil {
		args = &MwsStorageConfigurationsArgs{}
	}
	var resource MwsStorageConfigurations
	err := ctx.RegisterResource("databricks:aws/mwsStorageConfigurations:MwsStorageConfigurations", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMwsStorageConfigurations gets an existing MwsStorageConfigurations resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMwsStorageConfigurations(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MwsStorageConfigurationsState, opts ...pulumi.ResourceOption) (*MwsStorageConfigurations, error) {
	var resource MwsStorageConfigurations
	err := ctx.ReadResource("databricks:aws/mwsStorageConfigurations:MwsStorageConfigurations", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MwsStorageConfigurations resources.
type mwsStorageConfigurationsState struct {
	AccountId                *string `pulumi:"accountId"`
	BucketName               *string `pulumi:"bucketName"`
	CreationTime             *int    `pulumi:"creationTime"`
	StorageConfigurationId   *string `pulumi:"storageConfigurationId"`
	StorageConfigurationName *string `pulumi:"storageConfigurationName"`
}

type MwsStorageConfigurationsState struct {
	AccountId                pulumi.StringPtrInput
	BucketName               pulumi.StringPtrInput
	CreationTime             pulumi.IntPtrInput
	StorageConfigurationId   pulumi.StringPtrInput
	StorageConfigurationName pulumi.StringPtrInput
}

func (MwsStorageConfigurationsState) ElementType() reflect.Type {
	return reflect.TypeOf((*mwsStorageConfigurationsState)(nil)).Elem()
}

type mwsStorageConfigurationsArgs struct {
	AccountId                string `pulumi:"accountId"`
	BucketName               string `pulumi:"bucketName"`
	StorageConfigurationName string `pulumi:"storageConfigurationName"`
}

// The set of arguments for constructing a MwsStorageConfigurations resource.
type MwsStorageConfigurationsArgs struct {
	AccountId                pulumi.StringInput
	BucketName               pulumi.StringInput
	StorageConfigurationName pulumi.StringInput
}

func (MwsStorageConfigurationsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mwsStorageConfigurationsArgs)(nil)).Elem()
}
