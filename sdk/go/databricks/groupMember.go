// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package databricks

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type GroupMember struct {
	pulumi.CustomResourceState

	GroupId  pulumi.StringOutput `pulumi:"groupId"`
	MemberId pulumi.StringOutput `pulumi:"memberId"`
}

// NewGroupMember registers a new resource with the given unique name, arguments, and options.
func NewGroupMember(ctx *pulumi.Context,
	name string, args *GroupMemberArgs, opts ...pulumi.ResourceOption) (*GroupMember, error) {
	if args == nil || args.GroupId == nil {
		return nil, errors.New("missing required argument 'GroupId'")
	}
	if args == nil || args.MemberId == nil {
		return nil, errors.New("missing required argument 'MemberId'")
	}
	if args == nil {
		args = &GroupMemberArgs{}
	}
	var resource GroupMember
	err := ctx.RegisterResource("databricks:index/groupMember:GroupMember", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGroupMember gets an existing GroupMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGroupMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GroupMemberState, opts ...pulumi.ResourceOption) (*GroupMember, error) {
	var resource GroupMember
	err := ctx.ReadResource("databricks:index/groupMember:GroupMember", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GroupMember resources.
type groupMemberState struct {
	GroupId  *string `pulumi:"groupId"`
	MemberId *string `pulumi:"memberId"`
}

type GroupMemberState struct {
	GroupId  pulumi.StringPtrInput
	MemberId pulumi.StringPtrInput
}

func (GroupMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*groupMemberState)(nil)).Elem()
}

type groupMemberArgs struct {
	GroupId  string `pulumi:"groupId"`
	MemberId string `pulumi:"memberId"`
}

// The set of arguments for constructing a GroupMember resource.
type GroupMemberArgs struct {
	GroupId  pulumi.StringInput
	MemberId pulumi.StringInput
}

func (GroupMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*groupMemberArgs)(nil)).Elem()
}
