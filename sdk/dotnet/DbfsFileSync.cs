// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Databricks
{
    public partial class DbfsFileSync : Pulumi.CustomResource
    {
        [Output("fileSize")]
        public Output<int> FileSize { get; private set; } = null!;

        [Output("host")]
        public Output<string?> Host { get; private set; } = null!;

        [Output("mkdirs")]
        public Output<bool?> Mkdirs { get; private set; } = null!;

        [Output("srcPath")]
        public Output<string> SrcPath { get; private set; } = null!;

        [Output("tgtPath")]
        public Output<string> TgtPath { get; private set; } = null!;

        [Output("token")]
        public Output<string?> Token { get; private set; } = null!;


        /// <summary>
        /// Create a DbfsFileSync resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DbfsFileSync(string name, DbfsFileSyncArgs args, CustomResourceOptions? options = null)
            : base("databricks:index/dbfsFileSync:DbfsFileSync", name, args ?? new DbfsFileSyncArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DbfsFileSync(string name, Input<string> id, DbfsFileSyncState? state = null, CustomResourceOptions? options = null)
            : base("databricks:index/dbfsFileSync:DbfsFileSync", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DbfsFileSync resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DbfsFileSync Get(string name, Input<string> id, DbfsFileSyncState? state = null, CustomResourceOptions? options = null)
        {
            return new DbfsFileSync(name, id, state, options);
        }
    }

    public sealed class DbfsFileSyncArgs : Pulumi.ResourceArgs
    {
        [Input("fileSize", required: true)]
        public Input<int> FileSize { get; set; } = null!;

        [Input("host")]
        public Input<string>? Host { get; set; }

        [Input("mkdirs")]
        public Input<bool>? Mkdirs { get; set; }

        [Input("srcPath", required: true)]
        public Input<string> SrcPath { get; set; } = null!;

        [Input("tgtPath", required: true)]
        public Input<string> TgtPath { get; set; } = null!;

        [Input("token")]
        public Input<string>? Token { get; set; }

        public DbfsFileSyncArgs()
        {
        }
    }

    public sealed class DbfsFileSyncState : Pulumi.ResourceArgs
    {
        [Input("fileSize")]
        public Input<int>? FileSize { get; set; }

        [Input("host")]
        public Input<string>? Host { get; set; }

        [Input("mkdirs")]
        public Input<bool>? Mkdirs { get; set; }

        [Input("srcPath")]
        public Input<string>? SrcPath { get; set; }

        [Input("tgtPath")]
        public Input<string>? TgtPath { get; set; }

        [Input("token")]
        public Input<string>? Token { get; set; }

        public DbfsFileSyncState()
        {
        }
    }
}
