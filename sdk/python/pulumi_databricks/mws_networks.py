# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables

class MwsNetworks(pulumi.CustomResource):
    account_id: pulumi.Output[str]
    creation_time: pulumi.Output[float]
    error_messages: pulumi.Output[list]
    network_id: pulumi.Output[str]
    network_name: pulumi.Output[str]
    security_group_ids: pulumi.Output[list]
    subnet_ids: pulumi.Output[list]
    vpc_id: pulumi.Output[str]
    vpc_status: pulumi.Output[str]
    workspace_id: pulumi.Output[float]
    def __init__(__self__, resource_name, opts=None, account_id=None, error_messages=None, network_name=None, security_group_ids=None, subnet_ids=None, vpc_id=None, __props__=None, __name__=None, __opts__=None):
        """
        Create a MwsNetworks resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.

        The **error_messages** object supports the following:

          * `errorMessage` (`pulumi.Input[str]`)
          * `errorType` (`pulumi.Input[str]`)
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if account_id is None:
                raise TypeError("Missing required property 'account_id'")
            __props__['account_id'] = account_id
            __props__['error_messages'] = error_messages
            if network_name is None:
                raise TypeError("Missing required property 'network_name'")
            __props__['network_name'] = network_name
            if security_group_ids is None:
                raise TypeError("Missing required property 'security_group_ids'")
            __props__['security_group_ids'] = security_group_ids
            if subnet_ids is None:
                raise TypeError("Missing required property 'subnet_ids'")
            __props__['subnet_ids'] = subnet_ids
            if vpc_id is None:
                raise TypeError("Missing required property 'vpc_id'")
            __props__['vpc_id'] = vpc_id
            __props__['creation_time'] = None
            __props__['network_id'] = None
            __props__['vpc_status'] = None
            __props__['workspace_id'] = None
        super(MwsNetworks, __self__).__init__(
            'databricks:index/mwsNetworks:MwsNetworks',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, account_id=None, creation_time=None, error_messages=None, network_id=None, network_name=None, security_group_ids=None, subnet_ids=None, vpc_id=None, vpc_status=None, workspace_id=None):
        """
        Get an existing MwsNetworks resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.

        The **error_messages** object supports the following:

          * `errorMessage` (`pulumi.Input[str]`)
          * `errorType` (`pulumi.Input[str]`)
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["account_id"] = account_id
        __props__["creation_time"] = creation_time
        __props__["error_messages"] = error_messages
        __props__["network_id"] = network_id
        __props__["network_name"] = network_name
        __props__["security_group_ids"] = security_group_ids
        __props__["subnet_ids"] = subnet_ids
        __props__["vpc_id"] = vpc_id
        __props__["vpc_status"] = vpc_status
        __props__["workspace_id"] = workspace_id
        return MwsNetworks(resource_name, opts=opts, __props__=__props__)
    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

