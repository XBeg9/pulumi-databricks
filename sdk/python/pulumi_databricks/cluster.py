# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables

class Cluster(pulumi.CustomResource):
    autoscale: pulumi.Output[dict]
    autotermination_minutes: pulumi.Output[float]
    aws_attributes: pulumi.Output[dict]
    cluster_id: pulumi.Output[str]
    cluster_log_conf: pulumi.Output[dict]
    cluster_name: pulumi.Output[str]
    custom_tags: pulumi.Output[dict]
    default_tags: pulumi.Output[dict]
    docker_image: pulumi.Output[dict]
    driver_node_type_id: pulumi.Output[str]
    enable_elastic_disk: pulumi.Output[bool]
    idempotency_token: pulumi.Output[float]
    init_scripts: pulumi.Output[list]
    instance_pool_id: pulumi.Output[str]
    library_crans: pulumi.Output[list]
    library_eggs: pulumi.Output[list]
    library_jars: pulumi.Output[list]
    library_mavens: pulumi.Output[list]
    library_pypis: pulumi.Output[list]
    library_whls: pulumi.Output[list]
    node_type_id: pulumi.Output[str]
    num_workers: pulumi.Output[float]
    single_user_name: pulumi.Output[str]
    spark_conf: pulumi.Output[dict]
    spark_env_vars: pulumi.Output[dict]
    spark_version: pulumi.Output[str]
    ssh_public_keys: pulumi.Output[list]
    state: pulumi.Output[str]
    state_message: pulumi.Output[str]
    def __init__(__self__, resource_name, opts=None, autoscale=None, autotermination_minutes=None, aws_attributes=None, cluster_log_conf=None, cluster_name=None, custom_tags=None, docker_image=None, driver_node_type_id=None, enable_elastic_disk=None, idempotency_token=None, init_scripts=None, instance_pool_id=None, library_crans=None, library_eggs=None, library_jars=None, library_mavens=None, library_pypis=None, library_whls=None, node_type_id=None, num_workers=None, single_user_name=None, spark_conf=None, spark_env_vars=None, spark_version=None, ssh_public_keys=None, __props__=None, __name__=None, __opts__=None):
        """
        Create a Cluster resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.

        The **autoscale** object supports the following:

          * `maxWorkers` (`pulumi.Input[float]`)
          * `minWorkers` (`pulumi.Input[float]`)

        The **aws_attributes** object supports the following:

          * `availability` (`pulumi.Input[str]`)
          * `ebsVolumeCount` (`pulumi.Input[float]`)
          * `ebsVolumeSize` (`pulumi.Input[float]`)
          * `ebsVolumeType` (`pulumi.Input[str]`)
          * `firstOnDemand` (`pulumi.Input[float]`)
          * `instance_profile_arn` (`pulumi.Input[str]`)
          * `spotBidPricePercent` (`pulumi.Input[float]`)
          * `zoneId` (`pulumi.Input[str]`)

        The **cluster_log_conf** object supports the following:

          * `dbfs` (`pulumi.Input[dict]`)
            * `destination` (`pulumi.Input[str]`)

          * `s3` (`pulumi.Input[dict]`)
            * `cannedAcl` (`pulumi.Input[str]`)
            * `destination` (`pulumi.Input[str]`)
            * `enableEncryption` (`pulumi.Input[bool]`)
            * `encryptionType` (`pulumi.Input[str]`)
            * `endpoint` (`pulumi.Input[str]`)
            * `kmsKey` (`pulumi.Input[str]`)
            * `region` (`pulumi.Input[str]`)

        The **docker_image** object supports the following:

          * `basicAuth` (`pulumi.Input[dict]`)
            * `password` (`pulumi.Input[str]`)
            * `username` (`pulumi.Input[str]`)

          * `url` (`pulumi.Input[str]`)

        The **init_scripts** object supports the following:

          * `dbfs` (`pulumi.Input[dict]`)
            * `destination` (`pulumi.Input[str]`)

          * `s3` (`pulumi.Input[dict]`)
            * `cannedAcl` (`pulumi.Input[str]`)
            * `destination` (`pulumi.Input[str]`)
            * `enableEncryption` (`pulumi.Input[bool]`)
            * `encryptionType` (`pulumi.Input[str]`)
            * `endpoint` (`pulumi.Input[str]`)
            * `kmsKey` (`pulumi.Input[str]`)
            * `region` (`pulumi.Input[str]`)

        The **library_crans** object supports the following:

          * `messages` (`pulumi.Input[str]`)
          * `package` (`pulumi.Input[str]`)
          * `repo` (`pulumi.Input[str]`)
          * `status` (`pulumi.Input[str]`)

        The **library_eggs** object supports the following:

          * `messages` (`pulumi.Input[list]`)
          * `path` (`pulumi.Input[str]`)
          * `status` (`pulumi.Input[str]`)

        The **library_jars** object supports the following:

          * `messages` (`pulumi.Input[list]`)
          * `path` (`pulumi.Input[str]`)
          * `status` (`pulumi.Input[str]`)

        The **library_mavens** object supports the following:

          * `coordinates` (`pulumi.Input[str]`)
          * `exclusions` (`pulumi.Input[list]`)
          * `messages` (`pulumi.Input[list]`)
          * `repo` (`pulumi.Input[str]`)
          * `status` (`pulumi.Input[str]`)

        The **library_pypis** object supports the following:

          * `messages` (`pulumi.Input[list]`)
          * `package` (`pulumi.Input[str]`)
          * `repo` (`pulumi.Input[str]`)
          * `status` (`pulumi.Input[str]`)

        The **library_whls** object supports the following:

          * `messages` (`pulumi.Input[list]`)
          * `path` (`pulumi.Input[str]`)
          * `status` (`pulumi.Input[str]`)
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['autoscale'] = autoscale
            __props__['autotermination_minutes'] = autotermination_minutes
            __props__['aws_attributes'] = aws_attributes
            __props__['cluster_log_conf'] = cluster_log_conf
            __props__['cluster_name'] = cluster_name
            __props__['custom_tags'] = custom_tags
            __props__['docker_image'] = docker_image
            __props__['driver_node_type_id'] = driver_node_type_id
            __props__['enable_elastic_disk'] = enable_elastic_disk
            __props__['idempotency_token'] = idempotency_token
            __props__['init_scripts'] = init_scripts
            __props__['instance_pool_id'] = instance_pool_id
            __props__['library_crans'] = library_crans
            __props__['library_eggs'] = library_eggs
            __props__['library_jars'] = library_jars
            __props__['library_mavens'] = library_mavens
            __props__['library_pypis'] = library_pypis
            __props__['library_whls'] = library_whls
            __props__['node_type_id'] = node_type_id
            __props__['num_workers'] = num_workers
            __props__['single_user_name'] = single_user_name
            __props__['spark_conf'] = spark_conf
            __props__['spark_env_vars'] = spark_env_vars
            if spark_version is None:
                raise TypeError("Missing required property 'spark_version'")
            __props__['spark_version'] = spark_version
            __props__['ssh_public_keys'] = ssh_public_keys
            __props__['cluster_id'] = None
            __props__['default_tags'] = None
            __props__['state'] = None
            __props__['state_message'] = None
        super(Cluster, __self__).__init__(
            'databricks:index/cluster:Cluster',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, autoscale=None, autotermination_minutes=None, aws_attributes=None, cluster_id=None, cluster_log_conf=None, cluster_name=None, custom_tags=None, default_tags=None, docker_image=None, driver_node_type_id=None, enable_elastic_disk=None, idempotency_token=None, init_scripts=None, instance_pool_id=None, library_crans=None, library_eggs=None, library_jars=None, library_mavens=None, library_pypis=None, library_whls=None, node_type_id=None, num_workers=None, single_user_name=None, spark_conf=None, spark_env_vars=None, spark_version=None, ssh_public_keys=None, state=None, state_message=None):
        """
        Get an existing Cluster resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.

        The **autoscale** object supports the following:

          * `maxWorkers` (`pulumi.Input[float]`)
          * `minWorkers` (`pulumi.Input[float]`)

        The **aws_attributes** object supports the following:

          * `availability` (`pulumi.Input[str]`)
          * `ebsVolumeCount` (`pulumi.Input[float]`)
          * `ebsVolumeSize` (`pulumi.Input[float]`)
          * `ebsVolumeType` (`pulumi.Input[str]`)
          * `firstOnDemand` (`pulumi.Input[float]`)
          * `instance_profile_arn` (`pulumi.Input[str]`)
          * `spotBidPricePercent` (`pulumi.Input[float]`)
          * `zoneId` (`pulumi.Input[str]`)

        The **cluster_log_conf** object supports the following:

          * `dbfs` (`pulumi.Input[dict]`)
            * `destination` (`pulumi.Input[str]`)

          * `s3` (`pulumi.Input[dict]`)
            * `cannedAcl` (`pulumi.Input[str]`)
            * `destination` (`pulumi.Input[str]`)
            * `enableEncryption` (`pulumi.Input[bool]`)
            * `encryptionType` (`pulumi.Input[str]`)
            * `endpoint` (`pulumi.Input[str]`)
            * `kmsKey` (`pulumi.Input[str]`)
            * `region` (`pulumi.Input[str]`)

        The **docker_image** object supports the following:

          * `basicAuth` (`pulumi.Input[dict]`)
            * `password` (`pulumi.Input[str]`)
            * `username` (`pulumi.Input[str]`)

          * `url` (`pulumi.Input[str]`)

        The **init_scripts** object supports the following:

          * `dbfs` (`pulumi.Input[dict]`)
            * `destination` (`pulumi.Input[str]`)

          * `s3` (`pulumi.Input[dict]`)
            * `cannedAcl` (`pulumi.Input[str]`)
            * `destination` (`pulumi.Input[str]`)
            * `enableEncryption` (`pulumi.Input[bool]`)
            * `encryptionType` (`pulumi.Input[str]`)
            * `endpoint` (`pulumi.Input[str]`)
            * `kmsKey` (`pulumi.Input[str]`)
            * `region` (`pulumi.Input[str]`)

        The **library_crans** object supports the following:

          * `messages` (`pulumi.Input[str]`)
          * `package` (`pulumi.Input[str]`)
          * `repo` (`pulumi.Input[str]`)
          * `status` (`pulumi.Input[str]`)

        The **library_eggs** object supports the following:

          * `messages` (`pulumi.Input[list]`)
          * `path` (`pulumi.Input[str]`)
          * `status` (`pulumi.Input[str]`)

        The **library_jars** object supports the following:

          * `messages` (`pulumi.Input[list]`)
          * `path` (`pulumi.Input[str]`)
          * `status` (`pulumi.Input[str]`)

        The **library_mavens** object supports the following:

          * `coordinates` (`pulumi.Input[str]`)
          * `exclusions` (`pulumi.Input[list]`)
          * `messages` (`pulumi.Input[list]`)
          * `repo` (`pulumi.Input[str]`)
          * `status` (`pulumi.Input[str]`)

        The **library_pypis** object supports the following:

          * `messages` (`pulumi.Input[list]`)
          * `package` (`pulumi.Input[str]`)
          * `repo` (`pulumi.Input[str]`)
          * `status` (`pulumi.Input[str]`)

        The **library_whls** object supports the following:

          * `messages` (`pulumi.Input[list]`)
          * `path` (`pulumi.Input[str]`)
          * `status` (`pulumi.Input[str]`)
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["autoscale"] = autoscale
        __props__["autotermination_minutes"] = autotermination_minutes
        __props__["aws_attributes"] = aws_attributes
        __props__["cluster_id"] = cluster_id
        __props__["cluster_log_conf"] = cluster_log_conf
        __props__["cluster_name"] = cluster_name
        __props__["custom_tags"] = custom_tags
        __props__["default_tags"] = default_tags
        __props__["docker_image"] = docker_image
        __props__["driver_node_type_id"] = driver_node_type_id
        __props__["enable_elastic_disk"] = enable_elastic_disk
        __props__["idempotency_token"] = idempotency_token
        __props__["init_scripts"] = init_scripts
        __props__["instance_pool_id"] = instance_pool_id
        __props__["library_crans"] = library_crans
        __props__["library_eggs"] = library_eggs
        __props__["library_jars"] = library_jars
        __props__["library_mavens"] = library_mavens
        __props__["library_pypis"] = library_pypis
        __props__["library_whls"] = library_whls
        __props__["node_type_id"] = node_type_id
        __props__["num_workers"] = num_workers
        __props__["single_user_name"] = single_user_name
        __props__["spark_conf"] = spark_conf
        __props__["spark_env_vars"] = spark_env_vars
        __props__["spark_version"] = spark_version
        __props__["ssh_public_keys"] = ssh_public_keys
        __props__["state"] = state
        __props__["state_message"] = state_message
        return Cluster(resource_name, opts=opts, __props__=__props__)
    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

