# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables

class MwsWorkspaces(pulumi.CustomResource):
    account_id: pulumi.Output[str]
    aws_region: pulumi.Output[str]
    creation_time: pulumi.Output[float]
    credentials_id: pulumi.Output[str]
    customer_managed_key_id: pulumi.Output[str]
    deployment_name: pulumi.Output[str]
    is_no_public_ip_enabled: pulumi.Output[bool]
    network_error_messages: pulumi.Output[list]
    network_id: pulumi.Output[str]
    storage_configuration_id: pulumi.Output[str]
    verify_workspace_runnning: pulumi.Output[bool]
    workspace_id: pulumi.Output[float]
    workspace_name: pulumi.Output[str]
    workspace_status: pulumi.Output[str]
    workspace_status_message: pulumi.Output[str]
    workspace_url: pulumi.Output[str]
    def __init__(__self__, resource_name, opts=None, account_id=None, aws_region=None, credentials_id=None, customer_managed_key_id=None, deployment_name=None, is_no_public_ip_enabled=None, network_id=None, storage_configuration_id=None, verify_workspace_runnning=None, workspace_name=None, __props__=None, __name__=None, __opts__=None):
        """
        Create a MwsWorkspaces resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if account_id is None:
                raise TypeError("Missing required property 'account_id'")
            __props__['account_id'] = account_id
            if aws_region is None:
                raise TypeError("Missing required property 'aws_region'")
            __props__['aws_region'] = aws_region
            if credentials_id is None:
                raise TypeError("Missing required property 'credentials_id'")
            __props__['credentials_id'] = credentials_id
            __props__['customer_managed_key_id'] = customer_managed_key_id
            if deployment_name is None:
                raise TypeError("Missing required property 'deployment_name'")
            __props__['deployment_name'] = deployment_name
            __props__['is_no_public_ip_enabled'] = is_no_public_ip_enabled
            __props__['network_id'] = network_id
            if storage_configuration_id is None:
                raise TypeError("Missing required property 'storage_configuration_id'")
            __props__['storage_configuration_id'] = storage_configuration_id
            if verify_workspace_runnning is None:
                raise TypeError("Missing required property 'verify_workspace_runnning'")
            __props__['verify_workspace_runnning'] = verify_workspace_runnning
            if workspace_name is None:
                raise TypeError("Missing required property 'workspace_name'")
            __props__['workspace_name'] = workspace_name
            __props__['creation_time'] = None
            __props__['network_error_messages'] = None
            __props__['workspace_id'] = None
            __props__['workspace_status'] = None
            __props__['workspace_status_message'] = None
            __props__['workspace_url'] = None
        super(MwsWorkspaces, __self__).__init__(
            'databricks:index/mwsWorkspaces:MwsWorkspaces',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, account_id=None, aws_region=None, creation_time=None, credentials_id=None, customer_managed_key_id=None, deployment_name=None, is_no_public_ip_enabled=None, network_error_messages=None, network_id=None, storage_configuration_id=None, verify_workspace_runnning=None, workspace_id=None, workspace_name=None, workspace_status=None, workspace_status_message=None, workspace_url=None):
        """
        Get an existing MwsWorkspaces resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.

        The **network_error_messages** object supports the following:

          * `errorMessage` (`pulumi.Input[str]`)
          * `errorType` (`pulumi.Input[str]`)
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["account_id"] = account_id
        __props__["aws_region"] = aws_region
        __props__["creation_time"] = creation_time
        __props__["credentials_id"] = credentials_id
        __props__["customer_managed_key_id"] = customer_managed_key_id
        __props__["deployment_name"] = deployment_name
        __props__["is_no_public_ip_enabled"] = is_no_public_ip_enabled
        __props__["network_error_messages"] = network_error_messages
        __props__["network_id"] = network_id
        __props__["storage_configuration_id"] = storage_configuration_id
        __props__["verify_workspace_runnning"] = verify_workspace_runnning
        __props__["workspace_id"] = workspace_id
        __props__["workspace_name"] = workspace_name
        __props__["workspace_status"] = workspace_status
        __props__["workspace_status_message"] = workspace_status_message
        __props__["workspace_url"] = workspace_url
        return MwsWorkspaces(resource_name, opts=opts, __props__=__props__)
    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

