# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables

class DatabricksNotebookResult:
    """
    A collection of values returned by DatabricksNotebook.
    """
    def __init__(__self__, content=None, format=None, id=None, language=None, object_id=None, object_type=None, path=None):
        if content and not isinstance(content, str):
            raise TypeError("Expected argument 'content' to be a str")
        __self__.content = content
        if format and not isinstance(format, str):
            raise TypeError("Expected argument 'format' to be a str")
        __self__.format = format
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        __self__.id = id
        """
        The provider-assigned unique ID for this managed resource.
        """
        if language and not isinstance(language, str):
            raise TypeError("Expected argument 'language' to be a str")
        __self__.language = language
        if object_id and not isinstance(object_id, float):
            raise TypeError("Expected argument 'object_id' to be a float")
        __self__.object_id = object_id
        if object_type and not isinstance(object_type, str):
            raise TypeError("Expected argument 'object_type' to be a str")
        __self__.object_type = object_type
        if path and not isinstance(path, str):
            raise TypeError("Expected argument 'path' to be a str")
        __self__.path = path
class AwaitableDatabricksNotebookResult(DatabricksNotebookResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return DatabricksNotebookResult(
            content=self.content,
            format=self.format,
            id=self.id,
            language=self.language,
            object_id=self.object_id,
            object_type=self.object_type,
            path=self.path)

def databricks_notebook(format=None,path=None,opts=None):
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()


    __args__['format'] = format
    __args__['path'] = path
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = utilities.get_version()
    __ret__ = pulumi.runtime.invoke('databricks:index/databricksNotebook:DatabricksNotebook', __args__, opts=opts).value

    return AwaitableDatabricksNotebookResult(
        content=__ret__.get('content'),
        format=__ret__.get('format'),
        id=__ret__.get('id'),
        language=__ret__.get('language'),
        object_id=__ret__.get('objectId'),
        object_type=__ret__.get('objectType'),
        path=__ret__.get('path'))
